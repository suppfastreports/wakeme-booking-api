import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import Stripe from 'stripe';
import dotenv from 'dotenv';

// Load env
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç:', PORT);
console.log('üîß Render PORT:', process.env.PORT);
console.log('üîß Render NODE_ENV:', process.env.NODE_ENV);

// Middleware
// Stripe webhook needs raw body for signature verification. Register it BEFORE json parser
app.use('/api/stripe/webhook', express.raw({ type: 'application/json' }));

app.use(cors({
    origin: [
        'https://wakeme.ae',
        'https://www.wakeme.ae',
        'http://localhost:3000',
        'http://127.0.0.1:3000'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());
app.use(express.static('.')); // –î–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
// CORS middleware —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OPTIONS –∑–∞–ø—Ä–æ—Å—ã

// ALTEGIO API Configuration
const ALTEGIO_BASE_URL = 'https://api.alteg.io/api/v1';
const ALTEGIO_TOKEN = process.env.ALTEGIO_TOKEN || 'YOUR_ALTEGIO_TOKEN_HERE';
const ALTEGIO_PARTNER_ID = process.env.ALTEGIO_PARTNER_ID || 'YOUR_PARTNER_ID_HERE';

// Telegram Bot Configuration
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID_HERE';

// Stripe Configuration
const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY || '';
const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || '';
const APP_URL = process.env.APP_URL || `http://localhost:${PORT}`;
const stripe = STRIPE_SECRET_KEY ? new Stripe(STRIPE_SECRET_KEY) : null;

console.log('üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
console.log('üìä ALTEGIO API:', ALTEGIO_TOKEN !== 'YOUR_ALTEGIO_TOKEN_HERE' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('üì± Telegram Bot:', TELEGRAM_BOT_TOKEN !== 'YOUR_BOT_TOKEN_HERE' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('üí≥ Stripe:', STRIPE_SECRET_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log(`üåê –°–µ—Ä–≤–µ—Ä: http://localhost:${PORT}`);
console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîß Port: ${PORT}`);
console.log('üîß Process ID:', process.pid);
console.log('üîß Node Version:', process.version);
console.log('üîß Platform:', process.platform);
console.log('üîß Working Directory:', process.cwd());
console.log('üîß Environment Variables:', Object.keys(process.env).length);

// ===== ALTEGIO API ENDPOINTS =====

// Proxy endpoint for getting availability dates
app.post('/api/availability', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { service_id, start_date, end_date } = req.body;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', { service_id, start_date, end_date });

        // –ü–æ–ª—É—á–∞–µ–º staff_id –∏–∑ service_id (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥)
        let staffId;
        if (service_id === 12200654 || service_id === 12199769 || service_id === 12952120 || service_id === 12200653 || service_id === 12203754) {
            staffId = 2742288; // DUBAI_HARBOUR_MARINA
        } else if (service_id === 12396432 || service_id === 12396457 || service_id === 12952179 || service_id === 12396453 || service_id === 12396454) {
            staffId = 2780637; // DUBAI_CREEK_HARBOUR
        } else {
            staffId = 2742288; // Default
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –º–µ–∂–¥—É start_date –∏ end_date
        const allDates = [];
        const start = new Date(start_date);
        const end = new Date(end_date);
        
        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            allDates.push(d.toISOString().split('T')[0]);
        }

        console.log('üìä [ALTEGIO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞—Ç:', allDates);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
        const availableDates = [];
        
        for (const date of allDates) {
            try {
                const apiUrl = `${ALTEGIO_BASE_URL}/book_times/${ALTEGIO_COMPANY_ID}/${staffId}/${date}?service_ids[]=${service_id}`;
                
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                        'X-Partner-ID': ALTEGIO_PARTNER_ID,
                        'Accept': 'application/vnd.api.v2+json',
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã
                    if (data && data.data && Array.isArray(data.data) && data.data.length > 0) {
                        availableDates.push(date);
                        console.log(`‚úÖ [ALTEGIO] –î–∞—Ç–∞ ${date} –¥–æ—Å—Ç—É–ø–Ω–∞ (${data.data.length} —Å–ª–æ—Ç–æ–≤)`);
                    } else {
                        console.log(`‚ùå [ALTEGIO] –î–∞—Ç–∞ ${date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤)`);
                    }
                } else {
                    console.log(`‚ùå [ALTEGIO] –î–∞—Ç–∞ ${date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—à–∏–±–∫–∞ API: ${response.status})`);
                }
            } catch (error) {
                console.log(`‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã ${date}:`, error.message);
            }
        }

        console.log('üìä [ALTEGIO] –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:', availableDates);

        res.json({
            available_dates: availableDates,
            service_id: service_id,
            start_date: start_date,
            end_date: end_date
        });

    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting slots on a specific date
app.get('/api/slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { companyId, staffId, serviceId, date } = req.query;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤:', { companyId, staffId, serviceId, date });

        const apiUrl = `${ALTEGIO_BASE_URL}/book_times/${companyId}/${staffId}/${date}?service_ids[]=${serviceId}`;

        console.log('üîó [ALTEGIO] URL API:', apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì• [ALTEGIO] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ API:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('üìÑ [ALTEGIO] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        res.json(data);
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting slots (POST method)
app.post('/api/slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { date, service_id } = req.body;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤ (POST):', { date, service_id });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        const slots = [
            { time: '10:00' },
            { time: '11:00' },
            { time: '12:00' },
            { time: '13:00' },
            { time: '14:00' },
            { time: '15:00' },
            { time: '16:00' },
            { time: '17:00' }
        ];

        console.log('üìä [ALTEGIO] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–æ—Ç—ã:', slots);

        res.json(slots);

    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting nearest available slots
app.get('/api/nearest-slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { companyId, staffId, serviceId } = req.query;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', { companyId, staffId, serviceId });

        const apiUrl = `${ALTEGIO_BASE_URL}/book_staff_seances/${companyId}/${staffId}/?service_ids[]=${serviceId}`;

        console.log('üîó [ALTEGIO] URL –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì• [ALTEGIO] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ API –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('üìÑ [ALTEGIO] –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        res.json(data);
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// ===== HEALTH CHECK =====

// Health check endpoint
app.get('/api/health', (req, res) => {
    console.log('üè• [HEALTH] Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    const healthData = { 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        port: PORT,
        pid: process.pid
    };
    
    console.log('üè• [HEALTH] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', healthData);
    res.status(200).json(healthData);
});

// ===== LOGGING ENDPOINTS =====

// Store logs from frontend
app.post('/api/logs', (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const logData = req.body;
        console.log(`üìù [LOG] ${logData.level}: ${logData.message}`, logData.data);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // fs.appendFileSync('logs.txt', JSON.stringify(logData) + '\n');
        
        res.json({ success: true, message: 'Log received' });
    } catch (error) {
        console.error('‚ùå [LOG] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞:', error);
        res.status(500).json({ error: 'Failed to process log' });
    }
});

// Get logs (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/logs', (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    res.json({ message: 'Logs endpoint working' });
});

// ===== TELEGRAM API ENDPOINTS =====

// Proxy endpoint for sending Telegram messages
app.post('/api/send-telegram', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { message } = req.body;

        console.log('üì§ [TELEGRAM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram');

        const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const response = await fetch(telegramUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        console.log(`üì• [TELEGRAM] –û—Ç–≤–µ—Ç –æ—Ç Telegram: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç Telegram API:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('‚úÖ [TELEGRAM] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        res.json({ success: true, data });
    } catch (error) {
        console.error('‚ùå [TELEGRAM] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// ===== STRIPE CHECKOUT =====

// Create checkout session
app.post('/api/create-checkout-session', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');

    try {
        if (!stripe) {
            return res.status(500).json({ error: 'Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
        }

        const {
            name,
            phone,
            location,
            duration,
            trainer,
            time,
            date,
            amount_aed
        } = req.body || {};

        if (!amount_aed || !duration || !location) {
            return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã' });
        }

        const productName = `WakeMe ‚Äî ${duration} –º–∏–Ω ${trainer === 'with' ? '+ —Ç—Ä–µ–Ω–µ—Ä' : ''}`.trim();
        const unitAmount = Math.round(Number(amount_aed) * 100); // AED -> fils

        const session = await stripe.checkout.sessions.create({
            mode: 'payment',
            currency: 'aed',
            line_items: [
                {
                    quantity: 1,
                    price_data: {
                        currency: 'aed',
                        unit_amount: unitAmount,
                        product_data: {
                            name: productName
                        }
                    }
                }
            ],
            success_url: `${APP_URL}/booking-form.html?paid=1&session_id={CHECKOUT_SESSION_ID}`,
            cancel_url: `${APP_URL}/booking-form.html?canceled=1`,
            metadata: {
                name: name || '',
                phone: phone || '',
                location: location || '',
                duration: String(duration || ''),
                trainer: trainer || '',
                time: time || '',
                date: date || '',
                amount_aed: String(amount_aed)
            }
        });

        return res.json({ url: session.url });
    } catch (error) {
        console.error('‚ùå [STRIPE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Checkout-—Å–µ—Å—Å–∏–∏:', error);
        return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã' });
    }
});

// Stripe webhook: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
app.post('/api/stripe/webhook', async (req, res) => {
    const sig = req.headers['stripe-signature'];
    let event;

    try {
        if (!stripe) {
            throw new Error('Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        if (!STRIPE_WEBHOOK_SECRET) {
            throw new Error('–ù–µ –∑–∞–¥–∞–Ω STRIPE_WEBHOOK_SECRET');
        }

        event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);
    } catch (err) {
        console.error('‚ùå [STRIPE] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞:', err.message);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    try {
        if (event.type === 'checkout.session.completed') {
            const session = event.data.object;
            const md = session.metadata || {};
            const amountAed = md.amount_aed || Math.round((session.amount_total || 0) / 100);

            const message = `*–û–ø–ª–∞—á–µ–Ω–Ω–∞—è –±—Ä–æ–Ω—å WakeMe*\n\n*–ö–ª–∏–µ–Ω—Ç:* ${md.name || '-'}\n*–¢–µ–ª–µ—Ñ–æ–Ω:* ${md.phone || '-'}\n*–õ–æ–∫–∞—Ü–∏—è:* ${md.location || '-'}\n*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${md.duration || '-'} –º–∏–Ω\n*–¢—Ä–µ–Ω–µ—Ä:* ${md.trainer === 'with' ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞'}\n*–í—Ä–µ–º—è:* ${md.time || '-'}\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${amountAed} AED\n*–î–∞—Ç–∞:* ${md.date || '-'}\n*Stripe:* ${session.id}`;

            try {
                const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
                await fetch(telegramUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CHAT_ID,
                        text: message,
                        parse_mode: 'Markdown'
                    })
                });
            } catch (tgErr) {
                console.error('‚ùå [TELEGRAM] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:', tgErr);
            }
        }

        res.json({ received: true });
    } catch (error) {
        console.error('‚ùå [STRIPE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
        res.status(500).json({ error: 'Webhook handler error' });
    }
});

// ===== ROOT ENDPOINT =====

// Root endpoint for basic connectivity test
app.get('/', (req, res) => {
    console.log('üè† [ROOT] Root –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    res.status(200).json({ 
        message: 'WakeMe Booking API is running',
        timestamp: new Date().toISOString(),
        port: PORT
    });
});

// ===== SERVER START =====

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –§–æ—Ä–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/booking-form.html`);
    console.log(`üîç Health check: http://localhost:${PORT}/api/health`);
    console.log('');
    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('  ‚Ä¢ GET  /api/slots - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ALTEGIO');
    console.log('  ‚Ä¢ GET  /api/nearest-slots - –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã ALTEGIO');
    console.log('  ‚Ä¢ POST /api/send-telegram - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram');
    console.log('  ‚Ä¢ GET  /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
});
