import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import Stripe from 'stripe';
import dotenv from 'dotenv';

// Load env
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç:', PORT);
console.log('üîß Render PORT:', process.env.PORT);
console.log('üîß Render NODE_ENV:', process.env.NODE_ENV);

// Middleware
// Stripe webhook needs raw body for signature verification. Register it BEFORE json parser
app.use('/api/stripe/webhook', express.raw({ type: 'application/json' }));

app.use(cors({
    origin: [
        'https://wakeme.ae',
        'https://www.wakeme.ae',
        'http://localhost:3000',
        'http://127.0.0.1:3000'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());
app.use(express.static('.')); // –î–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
// CORS middleware —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç OPTIONS –∑–∞–ø—Ä–æ—Å—ã

// ALTEGIO API Configuration
const ALTEGIO_BASE_URL = 'https://api.alteg.io/api/v1';
const ALTEGIO_TOKEN = process.env.ALTEGIO_TOKEN || 'YOUR_ALTEGIO_TOKEN_HERE';
const ALTEGIO_PARTNER_ID = process.env.ALTEGIO_PARTNER_ID || 'YOUR_PARTNER_ID_HERE';
const ALTEGIO_COMPANY_ID = process.env.ALTEGIO_COMPANY_ID || '1252189';
const ALTEGIO_USER_TOKEN = process.env.ALTEGIO_USER_TOKEN || '';

// Telegram Bot Configuration
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID_HERE';

// Stripe Configuration
const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY || '';
const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || '';
const APP_URL = process.env.APP_URL || `http://localhost:${PORT}`;
const stripe = STRIPE_SECRET_KEY ? new Stripe(STRIPE_SECRET_KEY) : null;
const TIMEZONE_OFFSET_MINUTES = Number(process.env.TIMEZONE_OFFSET_MINUTES || '240'); // Dubai +04:00

// Location/Service mapping (server mirror of frontend config)
const LOCATION_CONFIG = {
    DUBAI_HARBOUR_MARINA: {
        staffId: 2742288,
        services: {
            30: 12199769,
            45: 12952120,
            60: 12200654,
            90: 12200653,
            120: 12203754
        }
    },
    DUBAI_CREEK_HARBOUR: {
        staffId: 2780637,
        services: {
            30: 12396457,
            45: 12952179,
            60: 12396432,
            90: 12396453,
            120: 12396454
        }
    }
};

// ===== Helpers =====
function buildAltegioHeaders(useUserToken) {
    const base = {
        Accept: 'application/vnd.api.v2+json',
        'Content-Type': 'application/json',
        Authorization: `Bearer ${useUserToken && ALTEGIO_USER_TOKEN ? ALTEGIO_USER_TOKEN : ALTEGIO_TOKEN}`
    };
    // X-Partner-ID –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–º—É —Ç–æ–∫–µ–Ω—É
    if (!useUserToken && ALTEGIO_PARTNER_ID) {
        base['X-Partner-ID'] = ALTEGIO_PARTNER_ID;
    }
    return base;
}

function maskToken(token) {
    if (!token || typeof token !== 'string') return '';
    if (token.length <= 10) return token;
    return `${token.slice(0, 6)}...${token.slice(-4)}`;
}
async function createAltegioBooking({ location, duration, date, time, name, phone, email, apiId, paymentSumAed }) {
    const loc = LOCATION_CONFIG[location];
    if (!loc) {
        throw new Error('Unknown location');
    }
    const staffId = loc.staffId;
    const serviceId = loc.services[duration];
    if (!serviceId) {
        throw new Error('Unknown service for duration');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +04:00 –¥–ª—è –î—É–±–∞—è)
    function formatWithOffset(dateStr, timeStr, offsetMinutes) {
        const [y, m, d] = dateStr.split('-').map(Number);
        const [hh, mm] = timeStr.split(':').map(Number);
        const sign = offsetMinutes >= 0 ? '+' : '-';
        const abs = Math.abs(offsetMinutes);
        const offH = String(Math.floor(abs / 60)).padStart(2, '0');
        const offM = String(abs % 60).padStart(2, '0');
        // –ù–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC, –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å –æ—Ñ—Ñ—Å–µ—Ç–æ–º
        return `${String(y).padStart(4, '0')}-${String(m).padStart(2, '0')}-${String(d).padStart(2, '0')}T${String(hh).padStart(2, '0')}:${String(mm).padStart(2, '0')}:00${sign}${offH}:${offM}`;
    }

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∑–æ–Ω—É –∫–æ–º–ø–∞–Ω–∏–∏ (–î—É–±–∞–π +04:00)
    const datetime = formatWithOffset(date, time, TIMEZONE_OFFSET_MINUTES);

    console.log('üß≠ [ALTEGIO] Token mode (check -> record):', 'partner_token', '->', 'partner_token');
    // 1) Check params (—Å user_token –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º X-Partner-ID)
    // –ù–∞ check –∏–¥—ë–º –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º —Å X-Partner-ID
    const checkHeaders = buildAltegioHeaders(false);
    console.log('üîê [ALTEGIO] Headers for check:', {
        Authorization: `Bearer ${maskToken(ALTEGIO_TOKEN)}`,
        partnerId: ALTEGIO_PARTNER_ID || null,
        hasPartnerIdHeader: Boolean(checkHeaders['X-Partner-ID'] || false)
    });
    console.log('üì¶ [ALTEGIO] book_check payload:', {
        appointments: [ { id: 1, services: [serviceId], staff_id: staffId, datetime } ]
    });
    const checkResp = await fetch(`${ALTEGIO_BASE_URL}/book_check/${ALTEGIO_COMPANY_ID}`, {
        method: 'POST',
        headers: checkHeaders,
        body: JSON.stringify({
            appointments: [ { id: 1, services: [serviceId], staff_id: staffId, datetime } ]
        })
    });
    if (checkResp.status !== 201) {
        const text = await checkResp.text();
        throw new Error(`Altegio check failed: ${text}`);
    }

    // 2) Create record
    async function requestCreate(withServices) {
        const sanitizedPhone = String(phone || '').replace(/\D/g, '');
        const body = {
            phone: sanitizedPhone,
            fullname: name,
            email: email || '',
            type: 'website',
            notify_by_sms: 6,
            notify_by_email: 0,
            api_id: apiId || undefined,
            appointments: [ withServices ? { id: 1, services: [serviceId], staff_id: staffId, datetime } : { id: 1, staff_id: staffId, datetime } ]
        };
        // –ù–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–¥—ë–º —Å user_token (–±–µ–∑ X-Partner-ID)
        // –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π —Ç–æ–∫–µ–Ω c prepaid –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ ¬´–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É¬ª
        const partnerHeaders = buildAltegioHeaders(false);
        const partnerBody = {
            ...body,
            payment_sum: typeof paymentSumAed === 'number' ? paymentSumAed : undefined,
            prepaid_confirmed: true
        };
        const resp = await fetch(`${ALTEGIO_BASE_URL}/book_record/${ALTEGIO_COMPANY_ID}`, {
            method: 'POST',
            headers: partnerHeaders,
            body: JSON.stringify(partnerBody)
        });
        const text = await resp.text();
        console.log('üì® [ALTEGIO] Partner record response:', resp.status, text);
        return { resp, text };
    }

    // Try with services first, then fallback without services if Altegio complains about online payment list
    let attempt = await requestCreate(true);
    if (attempt.resp.status !== 201 && /online payment/i.test(attempt.text)) {
        console.warn('‚ö†Ô∏è [ALTEGIO] Retry booking without services field due to online payment constraint');
        attempt = await requestCreate(false);
    }
    if (attempt.resp.status !== 201) {
        throw new Error(`Altegio booking failed: ${attempt.text}`);
    }
    let data;
    try { data = JSON.parse(attempt.text); } catch { data = { raw: attempt.text }; }
    return data;
}

// Add payment to visit in Altegio
async function addAltegioPayment({ recordId, amountAed, paymentTypeTitle = 'Card payment', comment = '' }) {
    // –ù–∞–π–¥—ë–º id —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –±–µ–∑ type_id, –º–Ω–æ–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è –±–µ–∑–Ω–∞–ª–∞
    const typeId = undefined;
    const payload = {
        amount: Number(amountAed),
        currency: 'AED',
        type: 1, // 1 ‚Äî –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ (–æ–±—ã—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç–∫–≤–∞–π—Ä–∏–Ω–≥—É)
        comment
    };
    const resp = await fetch(`${ALTEGIO_BASE_URL}/book_record/${ALTEGIO_COMPANY_ID}/${recordId}/payments`, {
        method: 'POST',
        headers: buildAltegioHeaders(Boolean(ALTEGIO_USER_TOKEN)),
        body: JSON.stringify(payload)
    });
    const text = await resp.text();
    if (!resp.ok) {
        throw new Error(`Add payment failed: ${text}`);
    }
    return text;
}

console.log('üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
console.log('üìä ALTEGIO API:', ALTEGIO_TOKEN !== 'YOUR_ALTEGIO_TOKEN_HERE' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('üì± Telegram Bot:', TELEGRAM_BOT_TOKEN !== 'YOUR_BOT_TOKEN_HERE' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('üè¢ Altegio Company ID:', ALTEGIO_COMPANY_ID ? ALTEGIO_COMPANY_ID : '–ù–ï –ó–ê–î–ê–ù');
console.log('üë§ Altegio User Token:', ALTEGIO_USER_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ó–ê–î–ê–ù');
console.log('üí≥ Stripe:', STRIPE_SECRET_KEY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log(`üåê –°–µ—Ä–≤–µ—Ä: http://localhost:${PORT}`);
console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîß Port: ${PORT}`);
console.log('üîß Process ID:', process.pid);
console.log('üîß Node Version:', process.version);
console.log('üîß Platform:', process.platform);
console.log('üîß Working Directory:', process.cwd());
console.log('üîß Environment Variables:', Object.keys(process.env).length);

// ===== ALTEGIO API ENDPOINTS =====

// Proxy endpoint for getting availability dates
app.post('/api/availability', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { service_id, start_date, end_date } = req.body;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', { service_id, start_date, end_date });

        // –ü–æ–ª—É—á–∞–µ–º staff_id –∏–∑ service_id (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥)
        let staffId;
        if (service_id === 12200654 || service_id === 12199769 || service_id === 12952120 || service_id === 12200653 || service_id === 12203754) {
            staffId = 2742288; // DUBAI_HARBOUR_MARINA
        } else if (service_id === 12396432 || service_id === 12396457 || service_id === 12952179 || service_id === 12396453 || service_id === 12396454) {
            staffId = 2780637; // DUBAI_CREEK_HARBOUR
        } else {
            staffId = 2742288; // Default
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –º–µ–∂–¥—É start_date –∏ end_date
        const allDates = [];
        const start = new Date(start_date);
        const end = new Date(end_date);
        
        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            allDates.push(d.toISOString().split('T')[0]);
        }

        console.log('üìä [ALTEGIO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞—Ç:', allDates);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        const availableDates = [];
        const concurrency = 6; // –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        async function checkDate(date) {
            const apiUrl = `${ALTEGIO_BASE_URL}/book_times/${ALTEGIO_COMPANY_ID}/${staffId}/${date}?service_ids[]=${service_id}`;
            try {
                const controller = new AbortController();
                const timeout = setTimeout(() => controller.abort(), 7000);
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                        'X-Partner-ID': ALTEGIO_PARTNER_ID,
                        'Accept': 'application/vnd.api.v2+json',
                        'Content-Type': 'application/json'
                    },
                    signal: controller.signal
                });
                clearTimeout(timeout);
                if (!response.ok) {
                    console.log(`‚ùå [ALTEGIO] –î–∞—Ç–∞ ${date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—à–∏–±–∫–∞ API: ${response.status})`);
                    return;
                }
                const data = await response.json();
                if (data && data.data && Array.isArray(data.data) && data.data.length > 0) {
                    availableDates.push(date);
                    console.log(`‚úÖ [ALTEGIO] –î–∞—Ç–∞ ${date} –¥–æ—Å—Ç—É–ø–Ω–∞ (${data.data.length} —Å–ª–æ—Ç–æ–≤)`);
                } else {
                    console.log(`‚ùå [ALTEGIO] –î–∞—Ç–∞ ${date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç —Å–ª–æ—Ç–æ–≤)`);
                }
            } catch (error) {
                console.log(`‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã ${date}:`, error.message);
            }
        }

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏
        for (let i = 0; i < allDates.length; i += concurrency) {
            const batch = allDates.slice(i, i + concurrency);
            await Promise.allSettled(batch.map(checkDate));
        }

        console.log('üìä [ALTEGIO] –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:', availableDates);

        res.json({
            available_dates: availableDates,
            service_id: service_id,
            start_date: start_date,
            end_date: end_date
        });

    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting slots on a specific date
app.get('/api/slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { companyId, staffId, serviceId, date } = req.query;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤:', { companyId, staffId, serviceId, date });

        const apiUrl = `${ALTEGIO_BASE_URL}/book_times/${companyId}/${staffId}/${date}?service_ids[]=${serviceId}`;

        console.log('üîó [ALTEGIO] URL API:', apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì• [ALTEGIO] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ API:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('üìÑ [ALTEGIO] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        res.json(data);
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting slots (POST method)
app.post('/api/slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { date, service_id } = req.body;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤ (POST):', { date, service_id });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        const slots = [
            { time: '10:00' },
            { time: '11:00' },
            { time: '12:00' },
            { time: '13:00' },
            { time: '14:00' },
            { time: '15:00' },
            { time: '16:00' },
            { time: '17:00' }
        ];

        console.log('üìä [ALTEGIO] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–æ—Ç—ã:', slots);

        res.json(slots);

    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting nearest available slots
app.get('/api/nearest-slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { companyId, staffId, serviceId } = req.query;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', { companyId, staffId, serviceId });

        const apiUrl = `${ALTEGIO_BASE_URL}/book_staff_seances/${companyId}/${staffId}/?service_ids[]=${serviceId}`;

        console.log('üîó [ALTEGIO] URL –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì• [ALTEGIO] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ API –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('üìÑ [ALTEGIO] –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        res.json(data);
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// ===== HEALTH CHECK =====

// Health check endpoint
app.get('/api/health', (req, res) => {
    console.log('üè• [HEALTH] Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    const healthData = { 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        port: PORT,
        pid: process.pid
    };
    
    console.log('üè• [HEALTH] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', healthData);
    res.status(200).json(healthData);
});

// ===== LOGGING ENDPOINTS =====

// Store logs from frontend
app.post('/api/logs', (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const logData = req.body;
        console.log(`üìù [LOG] ${logData.level}: ${logData.message}`, logData.data);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // fs.appendFileSync('logs.txt', JSON.stringify(logData) + '\n');
        
        res.json({ success: true, message: 'Log received' });
    } catch (error) {
        console.error('‚ùå [LOG] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞:', error);
        res.status(500).json({ error: 'Failed to process log' });
    }
});

// Get logs (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/logs', (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    res.json({ message: 'Logs endpoint working' });
});

// ===== TELEGRAM API ENDPOINTS =====

// Proxy endpoint for sending Telegram messages
app.post('/api/send-telegram', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { message } = req.body;

        console.log('üì§ [TELEGRAM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram');

        const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const response = await fetch(telegramUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        console.log(`üì• [TELEGRAM] –û—Ç–≤–µ—Ç –æ—Ç Telegram: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç Telegram API:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('‚úÖ [TELEGRAM] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        res.json({ success: true, data });
    } catch (error) {
        console.error('‚ùå [TELEGRAM] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// ===== STRIPE CHECKOUT =====

// Create checkout session
app.post('/api/create-checkout-session', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');

    try {
        console.log('üí≥ [STRIPE] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ Checkout-—Å–µ—Å—Å–∏–∏:', req.body);
        if (!stripe) {
            return res.status(500).json({ error: 'Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
        }

        const {
            name,
            phone,
            location,
            duration,
            trainer,
            time,
            date,
            amount_aed,
            return_url,
            timezone_offset_minutes
        } = req.body || {};

        if (!amount_aed || !duration || !location) {
            return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã' });
        }

        const productName = `WakeMe ‚Äî ${duration} min${trainer === 'with' ? ' + coach' : ''}`.trim();
        // amount_aed —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ë–ï–ó –ù–î–°, –¥–æ–±–∞–≤–∏–º 5% VAT –¥–ª—è –î—É–±–∞—è
        const baseAmount = Number(amount_aed);
        const amountWithVat = Math.round(baseAmount * 1.05 * 100); // AED->fils —Å VAT

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤–æ–∑–≤—Ä–∞—Ç–∞: –ª–∏–±–æ –∏–∑ —Ç–µ–ª–∞, –ª–∏–±–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Referer, –ª–∏–±–æ APP_URL
        const referer = req.headers.referer || '';
        const baseReturnUrl = (typeof return_url === 'string' && return_url.startsWith('http'))
            ? return_url
            : (referer && referer.startsWith('http') ? referer : `${APP_URL}/booking-form.html`);
        const successUrl = `${baseReturnUrl}${baseReturnUrl.includes('?') ? '&' : '?'}paid=1&session_id={CHECKOUT_SESSION_ID}`;
        const cancelUrl = `${baseReturnUrl}${baseReturnUrl.includes('?') ? '&' : '?'}canceled=1`;

        const session = await stripe.checkout.sessions.create({
            mode: 'payment',
            currency: 'aed',
            line_items: [
                {
                    quantity: 1,
                    price_data: {
                        currency: 'aed',
                        unit_amount: amountWithVat,
                        product_data: {
                            name: productName
                        }
                    }
                }
            ],
            success_url: successUrl,
            cancel_url: cancelUrl,
            metadata: {
                customer_name: name || '',
                customer_phone: phone || '',
                location,
                duration_minutes: String(duration || ''),
                trainer: trainer === 'with' ? 'with_coach' : 'without_coach',
                time: time || '',
                date: date || '',
                amount_aed_no_vat: String(baseAmount),
                vat_percent: '5',
                amount_aed_with_vat: String(Math.round(baseAmount * 1.05)),
                timezone_offset_minutes: String(typeof timezone_offset_minutes === 'number' ? timezone_offset_minutes : TIMEZONE_OFFSET_MINUTES)
            }
        });

        console.log('‚úÖ [STRIPE] –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session.id);
        return res.json({ url: session.url });
    } catch (error) {
        console.error('‚ùå [STRIPE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Checkout-—Å–µ—Å—Å–∏–∏:', error);
        return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã' });
    }
});

// Create Altegio booking (after payment usually, but can be used pre-payment as draft)
app.post('/api/altegio/book', async (req, res) => {
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');

    try {
        const { location, duration, date, time, name, phone, email } = req.body || {};
        if (!location || !duration || !date || !time || !name || !phone) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        const loc = LOCATION_CONFIG[location];
        if (!loc) return res.status(400).json({ error: 'Unknown location' });
        const staffId = loc.staffId;
        const serviceId = loc.services[duration];
        if (!serviceId) return res.status(400).json({ error: 'Unknown service for duration' });

        const datetime = new Date(`${date}T${time}:00`).toISOString();

        // 1) Optional: check params
        const checkResp = await fetch(`${ALTEGIO_BASE_URL}/book_check/${ALTEGIO_COMPANY_ID}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                appointments: [
                    { id: 1, services: [serviceId], staff_id: staffId, datetime }
                ]
            })
        });
        if (checkResp.status !== 201) {
            const text = await checkResp.text();
            return res.status(422).json({ error: 'Altegio check failed', details: text });
        }

        // 2) Create record
        const recordResp = await fetch(`${ALTEGIO_BASE_URL}/book_record/${ALTEGIO_COMPANY_ID}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                phone: phone,
                fullname: name,
                email: email || '',
                type: 'website',
                notify_by_sms: 6,
                notify_by_email: 0,
                appointments: [
                    { id: 1, services: [serviceId], staff_id: staffId, datetime }
                ]
            })
        });

        const bodyText = await recordResp.text();
        if (recordResp.status !== 201) {
            return res.status(recordResp.status).json({ error: 'Altegio booking failed', details: bodyText });
        }
        let data;
        try { data = JSON.parse(bodyText); } catch { data = { raw: bodyText }; }
        return res.status(201).json({ success: true, data });
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
        return res.status(500).json({ error: 'Failed to create Altegio booking' });
    }
});

// ===== TEST ENDPOINTS (no Stripe) =====
// Create booking directly in Altegio for testing (can also add a tiny payment)
app.post('/api/altegio/test', async (req, res) => {
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');

    try {
        const { location, duration, date, time, name, phone, simulatePayment } = req.body || {};
        if (!location || !duration || !date || !time || !name || !phone) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Use hybrid flow inside createAltegioBooking. Pass small paymentSum for partner attempt
        const attempt = await createAltegioBooking({
            location,
            duration: Number(duration),
            date,
            time,
            name,
            phone,
            email: '',
            apiId: 'TEST',
            paymentSumAed: 1
        });

        const result = { record: { status: attempt.resp?.status, body: attempt.text } };

        // Try to parse record_id from response
        let parsed;
        try { parsed = JSON.parse(attempt.text); } catch {}
        const created = parsed && (Array.isArray(parsed.data) ? parsed.data[0] : parsed.data);
        const recordId = created?.record_id || created?.id;

        if (simulatePayment && recordId) {
            try {
                const payRes = await addAltegioPayment({ recordId, amountAed: 1, comment: 'TEST payment via API' });
                result.payment = { ok: true, body: payRes };
            } catch (e) {
                result.payment = { ok: false, error: String(e) };
            }
        }

        return res.status(200).json({ success: true, ...result });
    } catch (error) {
        console.error('‚ùå [ALTEGIO TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', error);
        return res.status(500).json({ error: 'Failed test booking', details: error.message });
    }
});

// Stripe webhook: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
app.post('/api/stripe/webhook', async (req, res) => {
    const sig = req.headers['stripe-signature'];
    let event;

    try {
        if (!stripe) {
            throw new Error('Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        if (!STRIPE_WEBHOOK_SECRET) {
            throw new Error('–ù–µ –∑–∞–¥–∞–Ω STRIPE_WEBHOOK_SECRET');
        }

        event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);
    } catch (err) {
        console.error('‚ùå [STRIPE] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞:', err.message);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    try {
        if (event.type === 'checkout.session.completed') {
            const session = event.data.object;
            const md = session.metadata || {};
            const amountAed = md.amount_aed_with_vat || Math.round((session.amount_total || 0) / 100);

            const message = `*–û–ø–ª–∞—á–µ–Ω–Ω–∞—è –±—Ä–æ–Ω—å WakeMe*\n\n*–ö–ª–∏–µ–Ω—Ç:* ${md.customer_name || '-'}\n*–¢–µ–ª–µ—Ñ–æ–Ω:* ${md.customer_phone || '-'}\n*–õ–æ–∫–∞—Ü–∏—è:* ${md.location || '-'}\n*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${md.duration_minutes || '-'} –º–∏–Ω\n*–¢—Ä–µ–Ω–µ—Ä:* ${md.trainer === 'with_coach' ? '–° —Ç—Ä–µ–Ω–µ—Ä–æ–º' : '–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞'}\n*–í—Ä–µ–º—è:* ${md.time || '-'}\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${md.amount_aed_with_vat || amountAed} AED (—Å VAT)\n*–î–∞—Ç–∞:* ${md.date || '-'}\n*Stripe:* ${session.id}`;

            try {
                const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
                await fetch(telegramUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CHAT_ID,
                        text: message,
                        parse_mode: 'Markdown'
                    })
                });
            } catch (tgErr) {
                console.error('‚ùå [TELEGRAM] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ:', tgErr);
            }

            // Create booking in Altegio after successful payment
            try {
                console.log('üóìÔ∏è [ALTEGIO] –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã...');
                const booking = await createAltegioBooking({
                    location: md.location,
                    duration: Number(md.duration_minutes),
                    date: md.date,
                    time: md.time,
                    name: md.customer_name,
                    phone: md.customer_phone,
                    email: md.customer_email || '',
                    apiId: session.id,
                    paymentSumAed: Number(md.amount_aed_with_vat || Math.round((session.amount_total || 0) / 100))
                });
                console.log('‚úÖ [ALTEGIO] –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', booking);

                // –ü–æ–ª—É—á–∏–º record_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–∏–º –æ–ø–ª–∞—Ç—É
                const created = Array.isArray(booking?.data) ? booking.data[0] : booking?.data || {};
                const recordId = created.record_id || created.id;
                if (recordId) {
                    try {
                        const paidAmount = Number(md.amount_aed_with_vat || Math.round((session.amount_total || 0) / 100));
                        const payRes = await addAltegioPayment({
                            recordId,
                            amountAed: paidAmount,
                            comment: `Paid via Stripe ${session.id}`
                        });
                        console.log('üí∏ [ALTEGIO] –û–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∏–∑–∏—Ç—É:', payRes);
                    } catch (payErr) {
                        console.error('‚ùå [ALTEGIO] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É –∫ –≤–∏–∑–∏—Ç—É:', payErr);
                    }
                } else {
                    console.warn('‚ö†Ô∏è [ALTEGIO] –ù–µ –Ω–∞–π–¥–µ–Ω record_id –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
                }
            } catch (bookErr) {
                console.error('‚ùå [ALTEGIO] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:', bookErr);
            }
        }

        res.json({ received: true });
    } catch (error) {
        console.error('‚ùå [STRIPE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
        res.status(500).json({ error: 'Webhook handler error' });
    }
});

// ===== ROOT ENDPOINT =====

// Root endpoint for basic connectivity test
app.get('/', (req, res) => {
    console.log('üè† [ROOT] Root –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    res.status(200).json({ 
        message: 'WakeMe Booking API is running',
        timestamp: new Date().toISOString(),
        port: PORT
    });
});

// ===== SERVER START =====

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –§–æ—Ä–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/booking-form.html`);
    console.log(`üîç Health check: http://localhost:${PORT}/api/health`);
    console.log('');
    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('  ‚Ä¢ GET  /api/slots - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ALTEGIO');
    console.log('  ‚Ä¢ GET  /api/nearest-slots - –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã ALTEGIO');
    console.log('  ‚Ä¢ POST /api/send-telegram - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram');
    console.log('  ‚Ä¢ GET  /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
});
