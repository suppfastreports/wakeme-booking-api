import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç:', PORT);
console.log('üîß Render PORT:', process.env.PORT);
console.log('üîß Render NODE_ENV:', process.env.NODE_ENV);

// Middleware
app.use(cors({
    origin: [
        'https://wakeme.ae',
        'https://www.wakeme.ae',
        'http://localhost:3000',
        'http://127.0.0.1:3000'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());
app.use(express.static('.')); // –î–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', (req, res) => {
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.header('Access-Control-Allow-Credentials', 'true');
    res.sendStatus(200);
});

// ALTEGIO API Configuration
const ALTEGIO_BASE_URL = 'https://api.alteg.io/api/v1';
const ALTEGIO_TOKEN = process.env.ALTEGIO_TOKEN || 'YOUR_ALTEGIO_TOKEN_HERE';
const ALTEGIO_PARTNER_ID = process.env.ALTEGIO_PARTNER_ID || 'YOUR_PARTNER_ID_HERE';

// Telegram Bot Configuration
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID_HERE';

console.log('üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
console.log('üìä ALTEGIO API:', ALTEGIO_TOKEN !== 'YOUR_ALTEGIO_TOKEN_HERE' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('üì± Telegram Bot:', TELEGRAM_BOT_TOKEN !== 'YOUR_BOT_TOKEN_HERE' ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log(`üåê –°–µ—Ä–≤–µ—Ä: http://localhost:${PORT}`);
console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîß Port: ${PORT}`);
console.log('üîß Process ID:', process.pid);
console.log('üîß Node Version:', process.version);
console.log('üîß Platform:', process.platform);
console.log('üîß Working Directory:', process.cwd());
console.log('üîß Environment Variables:', Object.keys(process.env).length);

// ===== ALTEGIO API ENDPOINTS =====

// Proxy endpoint for getting availability dates
app.post('/api/availability', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { service_id, start_date, end_date } = req.body;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', { service_id, start_date, end_date });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –º–µ–∂–¥—É start_date –∏ end_date
        const dates = [];
        const start = new Date(start_date);
        const end = new Date(end_date);
        
        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            dates.push(d.toISOString().split('T')[0]);
        }

        console.log('üìä [ALTEGIO] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞—Ç—ã:', dates);

        res.json({
            available_dates: dates,
            service_id: service_id,
            start_date: start_date,
            end_date: end_date
        });

    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting slots on a specific date
app.get('/api/slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { companyId, staffId, serviceId, date } = req.query;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤:', { companyId, staffId, serviceId, date });

        const apiUrl = `${ALTEGIO_BASE_URL}/book_times/${companyId}/${staffId}/${date}?service_ids[]=${serviceId}`;

        console.log('üîó [ALTEGIO] URL API:', apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì• [ALTEGIO] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ API:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('üìÑ [ALTEGIO] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        res.json(data);
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting slots (POST method)
app.post('/api/slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { date, service_id } = req.body;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤ (POST):', { date, service_id });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        const slots = [
            { time: '10:00' },
            { time: '11:00' },
            { time: '12:00' },
            { time: '13:00' },
            { time: '14:00' },
            { time: '15:00' },
            { time: '16:00' },
            { time: '17:00' }
        ];

        console.log('üìä [ALTEGIO] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–æ—Ç—ã:', slots);

        res.json(slots);

    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// Proxy endpoint for getting nearest available slots
app.get('/api/nearest-slots', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { companyId, staffId, serviceId } = req.query;

        console.log('üì• [ALTEGIO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', { companyId, staffId, serviceId });

        const apiUrl = `${ALTEGIO_BASE_URL}/book_staff_seances/${companyId}/${staffId}/?service_ids[]=${serviceId}`;

        console.log('üîó [ALTEGIO] URL –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${ALTEGIO_TOKEN}`,
                'X-Partner-ID': ALTEGIO_PARTNER_ID,
                'Accept': 'application/vnd.api.v2+json',
                'Content-Type': 'application/json'
            }
        });

        console.log(`üì• [ALTEGIO] –û—Ç–≤–µ—Ç: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ API –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('üìÑ [ALTEGIO] –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        res.json(data);
    } catch (error) {
        console.error('‚ùå [ALTEGIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: error.message });
    }
});

// ===== HEALTH CHECK =====

// Health check endpoint
app.get('/api/health', (req, res) => {
    console.log('üè• [HEALTH] Health check –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    const healthData = { 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        port: PORT,
        pid: process.pid
    };
    
    console.log('üè• [HEALTH] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', healthData);
    res.status(200).json(healthData);
});

// ===== LOGGING ENDPOINTS =====

// Store logs from frontend
app.post('/api/logs', (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const logData = req.body;
        console.log(`üìù [LOG] ${logData.level}: ${logData.message}`, logData.data);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // fs.appendFileSync('logs.txt', JSON.stringify(logData) + '\n');
        
        res.json({ success: true, message: 'Log received' });
    } catch (error) {
        console.error('‚ùå [LOG] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞:', error);
        res.status(500).json({ error: 'Failed to process log' });
    }
});

// Get logs (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/logs', (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    res.json({ message: 'Logs endpoint working' });
});

// ===== TELEGRAM API ENDPOINTS =====

// Proxy endpoint for sending Telegram messages
app.post('/api/send-telegram', async (req, res) => {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    try {
        const { message } = req.body;

        console.log('üì§ [TELEGRAM] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram');

        const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const response = await fetch(telegramUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        console.log(`üì• [TELEGRAM] –û—Ç–≤–µ—Ç –æ—Ç Telegram: ${response.status} ${response.statusText}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå [TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç Telegram API:', errorText);
            return res.status(response.status).json({ error: errorText });
        }

        const data = await response.json();
        console.log('‚úÖ [TELEGRAM] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        res.json({ success: true, data });
    } catch (error) {
        console.error('‚ùå [TELEGRAM] –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// ===== ROOT ENDPOINT =====

// Root endpoint for basic connectivity test
app.get('/', (req, res) => {
    console.log('üè† [ROOT] Root –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    res.status(200).json({ 
        message: 'WakeMe Booking API is running',
        timestamp: new Date().toISOString(),
        port: PORT
    });
});

// ===== SERVER START =====

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –§–æ—Ä–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/booking-form.html`);
    console.log(`üîç Health check: http://localhost:${PORT}/api/health`);
    console.log('');
    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:');
    console.log('  ‚Ä¢ GET  /api/slots - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ALTEGIO');
    console.log('  ‚Ä¢ GET  /api/nearest-slots - –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã ALTEGIO');
    console.log('  ‚Ä¢ POST /api/send-telegram - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram');
    console.log('  ‚Ä¢ GET  /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
}).on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
});
