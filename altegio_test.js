// @ts-check
import fetch from "node-fetch";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  token: process.env.ALTEGIO_TOKEN,
  baseUrl: "https://api.alteg.io/v1",
  branchId: 1252189,
  staffId: 2742288, // Dubai Harbour Marina
  services: {
    "30": 12199769,
    "60": 12200654,
    "90": 12200653,
    "120": 12203754
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (!config.token) {
  console.error("‚ùå –û—à–∏–±–∫–∞: ALTEGIO_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ —Ñ–∏–ª–∏–∞–ª—É
async function getServices() {
  try {
    console.log("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥...");
    const res = await fetch(`${config.baseUrl}/branches/${config.branchId}/services`, {
      headers: { Authorization: `Bearer ${config.token}` }
    });
    
    if (!res.ok) {
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
    const data = await res.json();
    console.log("‚úÖ –£—Å–ª—É–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã:", data);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥:", error.message);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
async function getSlots(serviceId = config.services["90"], date = "2025-10-22") {
  try {
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏ ${serviceId} –Ω–∞ ${date}...`);
    const res = await fetch(
      `${config.baseUrl}/branches/${config.branchId}/slots?service_id=${serviceId}&staff_id=${config.staffId}&date=${date}`,
      { headers: { Authorization: `Bearer ${config.token}` } }
    );
    
    if (!res.ok) {
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
    const data = await res.json();
    console.log("‚úÖ –°–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:", data);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:", error.message);
    throw error;
  }
}

// –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å
async function createBooking(bookingData) {
  try {
    const body = {
      branch: config.branchId,
      service_id: bookingData.serviceId || config.services["90"],
      staff_id: bookingData.staffId || config.staffId,
      datetime: bookingData.datetime || "2025-10-22T14:30:00+04:00",
      duration: bookingData.duration || 90,
      client: {
        name: bookingData.client?.name || "Test User",
        phone: bookingData.client?.phone || "+971999999999",
        email: bookingData.client?.email || "test@example.com"
      },
      comment: bookingData.comment || "Test API booking"
    };

    console.log("üîç –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å...", body);

    const res = await fetch(`${config.baseUrl}/branches/${config.branchId}/bookings`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${config.token}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    });

    if (!res.ok) {
      const errorData = await res.json().catch(() => ({}));
      throw new Error(`HTTP ${res.status}: ${res.statusText}. ${JSON.stringify(errorData)}`);
    }

    const data = await res.json();
    console.log("‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞:", data);
    return data;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏:", error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã API ALTEGIO...\n");
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥
    await getServices();
    console.log("");
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    await getSlots();
    console.log("");
    
    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
    await createBooking({
      client: {
        name: "–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤",
        phone: "+971501234567",
        email: "ivan@example.com"
      },
      comment: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ API"
    });
    
    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();
